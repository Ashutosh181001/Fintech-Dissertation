# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: crypto
---
# Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crypto-storage
  namespace: crypto
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: premium-rwo
---
# Producer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer
  namespace: crypto
  labels:
    app: producer
    tier: ingestion
spec:
  replicas: 1
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
        tier: ingestion
    spec:
      containers:
      - name: producer
        image: europe-west2-docker.pkg.dev/crypto-anomaly-detection/crypto/crypto-producer:latest
        imagePullPolicy: Always
        command: ["python", "kafka_producer.py"]
        envFrom:
        - secretRef:
            name: kafka-credentials
        env:
        - name: ENV_MODE
          value: "GKE"
        - name: REGION
          value: "europe-west2"
        - name: PERFORMANCE_MODE
          value: "high-performance"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 4000m
            memory: 4Gi
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f kafka_producer.py && test -f /proc/1/cmdline"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f kafka_producer.py"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
# Detector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: detector
  namespace: crypto
  labels:
    app: detector
    tier: processing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: detector
  template:
    metadata:
      labels:
        app: detector
        tier: processing
    spec:
      initContainers:
      - name: init-data-dir
        image: busybox:1.36
        command: ["sh", "-c", "mkdir -p /data/output && chmod -R 777 /data"]
        volumeMounts:
        - name: storage
          mountPath: /data
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
      containers:
      - name: detector
        image: europe-west2-docker.pkg.dev/crypto-anomaly-detection/crypto/crypto-detector:latest
        imagePullPolicy: Always
        command: ["python", "detect.py"]
        envFrom:
        - secretRef:
            name: kafka-credentials
        env:
        - name: DATABASE_PATH
          value: "/data/output/trading_anomalies.db"
        - name: TRADES_CSV
          value: "/data/output/trades.csv"
        - name: ANOMALIES_CSV
          value: "/data/output/anomalies.csv"
        - name: ENV_MODE
          value: "GKE"
        - name: REGION
          value: "europe-west2"
        - name: PERFORMANCE_MODE
          value: "high-performance"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: storage
          mountPath: /data
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
          limits:
            cpu: 8000m
            memory: 16Gi
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f detect.py && test -f /proc/1/cmdline"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f detect.py"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: crypto-storage
---
# Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  namespace: crypto
  labels:
    app: dashboard
    tier: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
        tier: visualization
    spec:
      containers:
      - name: dashboard
        image: europe-west2-docker.pkg.dev/crypto-anomaly-detection/crypto/crypto-dashboard:latest
        imagePullPolicy: Always
        command: ["streamlit", "run", "dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]
        ports:
        - containerPort: 8501
          name: http
        volumeMounts:
        - name: storage
          mountPath: /data
        env:
        - name: ENV_MODE
          value: "GKE"
        - name: REGION
          value: "europe-west2"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: crypto-storage
---
# Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: dashboard
  namespace: crypto
  labels:
    app: dashboard
spec:
  selector:
    app: dashboard
  ports:
  - port: 8501
    targetPort: 8501
    name: http
  type: ClusterIP
